const fs = require('fs');
const path = require('path');

// Script ƒë·ªÉ setup ngrok callback URL nhanh
function setupNgrokCallback() {
  console.log('üîß Setup Ngrok Callback URL...\n');

  const configPath = path.join(__dirname, 'config', 'zalopay.js');

  console.log('üìã H∆∞·ªõng d·∫´n setup:');
  console.log('1. C√†i ngrok: npm install -g ngrok');
  console.log('2. Ch·∫°y ngrok: ngrok http 3000');
  console.log('3. Copy HTTPS URL t·ª´ ngrok (v√≠ d·ª•: https://abc123.ngrok.io)');
  console.log('4. Ch·∫°y script n√†y v·ªõi URL ƒë√≥\n');

  // Get ngrok URL from command line
  const ngrokUrl = process.argv[2];

  if (!ngrokUrl) {
    console.log('‚ùå Vui l√≤ng provide ngrok URL:');
    console.log('node setup_ngrok_callback.js https://your-ngrok-url.ngrok.io');
    return;
  }

  if (!ngrokUrl.includes('ngrok.io') && !ngrokUrl.includes('https://')) {
    console.log('‚ùå URL kh√¥ng h·ª£p l·ªá. C·∫ßn HTTPS ngrok URL');
    console.log('V√≠ d·ª•: https://abc123.ngrok.io');
    return;
  }

  try {
    // Read current config
    const configContent = fs.readFileSync(configPath, 'utf8');

    // Update callback URL
    const newCallbackUrl = `${ngrokUrl}/api/payment/callback`;
    const updatedConfig = configContent.replace(
      /callback_url:\s*"[^"]*"/g,
      `callback_url: "${newCallbackUrl}"`
    );

    // Write updated config
    fs.writeFileSync(configPath, updatedConfig);

    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t callback URL:');
    console.log(`   ${newCallbackUrl}`);
    console.log('\nüöÄ Restart server ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi:');
    console.log('   npm run dev');
    console.log('\nüß™ Test ZaloPay API:');
    console.log('   node debug_zalopay_api.js');

  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t config:', error.message);
  }
}

// T·∫°o script restore callback URL v·ªÅ localhost
function restoreLocalCallback() {
  console.log('üîÑ Restore callback URL v·ªÅ localhost...');

  const configPath = path.join(__dirname, 'config', 'zalopay.js');

  try {
    const configContent = fs.readFileSync(configPath, 'utf8');

    const localCallbackUrl = 'http://localhost:3000/api/payment/callback';
    const updatedConfig = configContent.replace(
      /callback_url:\s*"[^"]*"/g,
      `callback_url: "${localCallbackUrl}"`
    );

    fs.writeFileSync(configPath, updatedConfig);

    console.log('‚úÖ ƒê√£ restore callback URL v·ªÅ localhost');
    console.log('‚ö†Ô∏è L∆∞u √Ω: ZaloPay s·∫Ω kh√¥ng th·ªÉ access localhost callback');

  } catch (error) {
    console.error('‚ùå L·ªói khi restore config:', error.message);
  }
}

// Check command
const command = process.argv[2];

if (command === 'restore') {
  restoreLocalCallback();
} else if (command && command.startsWith('http')) {
  // URL provided
  setupNgrokCallback();
} else {
  console.log('üîß ZaloPay Callback URL Setup Tool\n');
  console.log('C√°ch s·ª≠ d·ª•ng:');
  console.log('1. Setup ngrok URL:');
  console.log('   node setup_ngrok_callback.js https://your-ngrok-url.ngrok.io');
  console.log('');
  console.log('2. Restore v·ªÅ localhost:');
  console.log('   node setup_ngrok_callback.js restore');
  console.log('');
  console.log('üìù L∆∞u √Ω:');
  console.log('- Ngrok URL c·∫ßn c√≥ HTTPS');
  console.log('- Restart server sau khi thay ƒë·ªïi');
  console.log('- D√πng "restore" ƒë·ªÉ v·ªÅ localhost khi kh√¥ng c·∫ßn ngrok');
}
